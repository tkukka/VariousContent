                            .NOLIST

CRLF                        EQU     <13, 10>

LOG_OK                      EQU     0
LOG_VIRHE_NOLLA             EQU     1
LOG_VIRHE_NEG               EQU     2

POWZ_OK                     EQU     0
POWZ_VIRHE                  EQU     1


;KOMPLEKSILUKU               STRUCT
;re                          REAL8   ?
;im                          REAL8   ?
;KOMPLEKSILUKU               ENDS

TARKKUUST                   TYPEDEF BYTE

KOMPLEKSILUKU               STRUCT
   UNION Reosa
      Re8                   REAL8   ?
      Re10                  REAL10  ?
   ENDS
   UNION Imosa
      Im8                   REAL8   ?
      Im10                  REAL10  ?
   ENDS
Tarkkuus                    TARKKUUST 0
KOMPLEKSILUKU               ENDS

VEKTORI                     STRUCT
x                           REAL8   ?
y                           REAL8   ?
z                           REAL8   ?
VEKTORI                     ENDS

PKOMPL                      TYPEDEF PTR KOMPLEKSILUKU
PVEKTORI                    TYPEDEF PTR VEKTORI

;omat funktiot
_valmistele_konsoli         PROTO   C

_lue_konsolilta             PROTO   C  Buffer:PVOID, NumberOfCharsToRead:DWORD,
                                       NumberOfCharsRead:PDWORD

_tulosta_konsoliin          PROTO   C  Buffer:PVOID, NumberOfChars:DWORD

_log10                      PROTO   C  luku:REAL8, virhekoodi:PDWORD
_ln                         PROTO   C  luku:REAL8, virhekoodi:PDWORD
_lnz                        PROTO   C  luku:PKOMPL, tulos:PKOMPL, virhekoodi:PDWORD
_exp                        PROTO   C  potenssi:REAL8
_expz                       PROTO   C  potenssi:PKOMPL, tulos:PKOMPL
_mulz                       PROTO   C  lukuA:PKOMPL, lukuB:PKOMPL, tulos:PKOMPL
_powz                       PROTO   C  luku:PKOMPL, potenssi:PKOMPL, tulos:PKOMPL, virhekoodi:PDWORD
_vektorin_pituus            PROTO   C  vektori:PVEKTORI


modulo                      MACRO   a:REQ, b:REQ
                            push    edx
                            push    ebx
                            mov     ebx, b
                            mov     eax, a
                            xor     edx, edx
                            div     ebx
                            mov     eax, edx
                            pop     ebx
                            pop     edx
                            ENDM

                            .NOLISTMACRO
                            .LIST
